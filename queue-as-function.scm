(define (make-queue)
  (let ((front-ptr '())
	(rear-ptr '()))

    (define (empty-queue?)
      (null? front-ptr))

    (define (front-queue)
      (if (empty-queue?)
	  (error "Queue is empty")
	  (car front-ptr)))

    (define (set-front-ptr! item)
      (set! front-ptr item))

    (define (set-rear-ptr! item)
      (set! rear-ptr item))

    (define (insert-queue item)
      (let ((new-pair (cons item '())))
	(cond ((empty-queue?)
	       (set-front-ptr! new-pair)
	       (set-rear-ptr! new-pair))
	      (else (set-cdr! rear-ptr new-pair)
		    (set-rear-ptr! new-pair)))))

    (define (delete-queue)
      (cond ((empty-queue?)
	     (error "DELETE! called with an empty queue\n")
	     (else (set-front-ptr! (cdr front-ptr))))))

    (define (print-queue)
      (define (iter front)
	(if (null? front)
	    (newline)
	    (begin (display (car front))
		   (display " ")
		   (iter (cdr front)))))
      (iter front-ptr))

    (define (dispatch m)
      (cond ((eq? m 'empty-queue?) (empty-queue?))
	    ((eq? m 'front-queue) (front-queue))
	    ((eq? m 'insert-queue) insert-queue)
	    ((eq? m 'delete-queue) (delete-queue))
	    ((eq? m 'print-queue) (print-queue))
	    (else (error "Undefined operation on queue\n"))))
    dispatch))
